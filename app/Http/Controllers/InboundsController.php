<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Models\Inbounds;
use App\Services\Agents;
use App\Services\Sources\Generic;
use App\Services\Sources\TwitterX;
use App\Services\Sources\SiteList;
use Exception;
class InboundsController extends Controller
{
    public function receiveInbounds(Request $request)
    {
        $AIAgent = new Agents;
        $inbounds = new Inbounds;

        $inbounds->url = $request->url;
        $inbounds->notes = $request->notes ? $request->notes : '';
        $inbounds->source = parse_url($inbounds->url, PHP_URL_HOST);
        $inbounds->user_id = $request->user_id;

        $inboundId = $this->getLastInbound();

        if(in_array($inbounds->source, SiteList::$twitterUrls)){ // if Twitter URL
            $twitterXHandler = new TwitterX;
            $tweetRaw = $twitterXHandler->handleTwitterX($inbounds->url);
            $content = $tweetRaw['text'];
            $author = $tweetRaw['author'];

            $tweetData = $AIAgent->retrievalAgent($content);
            $tweetContent = response()->json([$tweetData]);
            $tweetContent = json_decode($tweetContent->getContent(), true)[0]['original'];
            $tweetContent = json_decode($tweetContent, true)['choices'][0]['message']['content'];

            $summary = $AIAgent->summaryAgent($tweetContent, $inbounds->notes);
            $summaryContent = response()->json([$summary]);
            $summaryContent = json_decode($summaryContent->getContent(), true)[0]['original'];
            $summaryContent = json_decode($summaryContent, true)['choices'][0]['message']['content'];

            $inbounds->summary = $summaryContent;
        }

        if(!in_array($inbounds->source, SiteList::$twitterUrls)){
            $genericSite = new Generic;
            $genericSite->genericSiteHandler($inbounds->url); // launch applescript to capture website html
            sleep(15); // wait for capture

            $directoryPath = '../site-data/';
            $files = scandir($directoryPath); // get contents of site-data directory

            $genericSite->convertHtmltoTxt(); // run html to text conversion
            sleep(5); // wait for conversion

            if (file_exists($directoryPath . $files[2])) { // clean-up captured doc
                unlink($directoryPath . $files[2]);
            }

            $files = scandir($directoryPath); // update contents of site-data directory
            $content = file_get_contents($directoryPath . $files[2]); // store contents of text file

            $summary = $AIAgent->genericRetrievalAgent($content); // get AI summary

            if (file_exists($directoryPath . $files[2])) { // clean-up converted doc
                unlink($directoryPath . $files[2]);
            }

            return response()->json([$summary], 201);
        }

        /* if(empty($inbounds->summary)){
            $inbounds->summary = 'blank';
        }
        $inbounds->save();
        $relayResponse = $inbounds->summary;
        $relayResponse .='

Summary Generated by Mistral-7B-Instruct-v0.1-GGUF';
        return response()->json([$relayResponse], 201); */
    }

    public function showAllInbounds()
    {
        $inbounds = Inbounds::all();
        return response()->json($inbounds);
    }

    public function showInbound($id)
    {
        $inbounds = Inbounds::find($id);
        if(!empty($inbounds))
        {
            return response()->json($inbounds);
        } else {
            return response()->json(['message' => 'Post Not Found'], 404);
        }
    }

    public function getLastInbound()
    {
        $id = Inbounds::orderBy('id', 'DESC')->first();
        return isset($id) ? $id : null;
    }

    public function updateInbound(Request $request, $id)
    {
        $inbounds = Inbounds::find($id);
        if(!empty($inbounds))
        {
            $inbounds->url = $request->url;
            $inbounds->notes = $request->notes;
            $inbounds->save();
            return response()->json(['message' => 'Post Updated'], 200);
        } else {
            return response()->json(['message' => 'Post Not Found'], 404);
        }
    }

    public function removeInbound($id)
    {
        $inbounds = Inbounds::find($id);
        if(!empty($inbounds))
        {
            $inbounds->delete();
            return response()->json(['message' => 'Post Destroyed'], 200);
        } else {
            return response()->json(['message' => 'Post Not Found'], 404);
        }
    }
}
